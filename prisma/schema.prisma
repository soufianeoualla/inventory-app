// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

enum role {
  owner
  user
  admin
}

model company {
  id        String      @id @default(cuid()) @map(name: "id")
  name      String
  users     User[]
  inventory inventory[]
}

model User {
  name          String
  id            String    @id @default(cuid()) @map(name: "id")
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  role          role      @default(owner)
  company       company   @relation(fields: [companyId], references: [id])
  companyId     String    @default(cuid()) @map(name: "company_id")
}

model article {
  id          String    @id @default(cuid())
  name        String
  price       Float
  total       Float
  ref         Int
  quantity    Int
  category    String
  inventory   inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String    @default(cuid()) @map(name: "inventoryId_id")

  @@unique([ref, inventoryId])
}

enum type {
  sortie
  entree
}

enum status {
  pending
  completed
}

model operation {
  id            String    @id
  ref           Int
  date          DateTime
  createdAt     DateTime  @default(now())
  email         String
  article       String
  price         Float
  total         Float
  category      String
  quantity      Int
  companyId     String
  inventory     inventory @relation(fields: [inventoryId], references: [id])
  inventoryId   String    @default(cuid()) @map(name: "inventoryId_id")
  type          type
  inventoryName String
  status        status
}

model inventory {
  id        String      @id @default(cuid())
  name      String
  method    String
  article   article[]
  company   company     @relation(fields: [companyId], references: [id])
  companyId String      @default(cuid()) @map(name: "company_id")
  entree    operation[]
}

model verificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model passwordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
